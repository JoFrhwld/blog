{
  "hash": "d7e7987a72bbebd0930df43068ece0eb",
  "result": {
    "markdown": "---\ntitle: \"R Package Exploration (Jan 2023)\"\ndate: 2023-01-27\ncategories:\n  - R\n  - \"R package exploration\"\n  - \"`{ggforce}`\"\n  - \"`{geomtextpath}`\"\n  - \"`{ggdensity}`\"\nimage: \"index_files/figure-html/fig-penguin-hull4-1.png\"\ntwitter-card: \n  image: \"index_files/figure-html/fig-penguin-hull4-1.png\"\n  card-style: summary_large_image\nopen-graph:\n  image: \"index_files/figure-html/fig-penguin-hull4-1.png\"\nknitr: \n  opts_chunk: \n    message: false\norder: 04    \n---\n\n\nAs I scroll through my feeds, I often come across a really cool looking package, or a new feature of a package, that I think looks really cool, and then I forget to go back to really kick the tires to see how it works. So I've decided to try to set up a workflow where I send the docs or `{pkgdown}` pages for the package to a Trello board, and then come back maybe once a month and experiment with them in a blog post.\n\n## `{ggforce}`, `{ggdensity}` and `{geomtextpath}`\n\nThe packages I want to mess around with today are all extensions to `{ggplot2}`, so I'll load up the `{palmerpenguins}` dataset for experimentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## setup\nlibrary(tidyverse)\nlibrary(khroma)\nlibrary(palmerpenguins)\n\n## exploration packages\nlibrary(ggforce)\nlibrary(ggdensity)\nlibrary(geomtextpath)\n```\n:::\n\n\n## `{ggforce}` and convex hulls\n\nThe `{ggforce}` package as the option to add a convex hull over your data (`ggforce::geom_mark_hull()`), kind of indicating where the data clusters are. Here's my base plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 <- \n  penguins |> \n  drop_na() |> \n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species))+\n    geom_point()+\n    scale_color_brewer(palette = \"Dark2\")+\n    scale_fill_brewer(palette = \"Dark2\")\nplot1\n```\n\n::: {.cell-output-display}\n![The base penguins scatterplot](index_files/figure-html/fig-penguin1-1.png){#fig-penguin1 fig-align='center' fig-alt='A scatter plot of penguins\\' bill length and bill depth. There are three species plotted: Adelie, Chinstrap, Gentoo' width=576}\n:::\n:::\n\n\nI'll throw on the default convex hull.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 +\n  geom_mark_hull()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![Basic convex hull](index_files/figure-html/fig-penguin_hull1-1.png){#fig-penguin_hull1 fig-align='center' fig-alt='A scatter plot with convex hulls plotted around the three penguin\\'s data points. The convex hulls are somewhat jagged.' width=576}\n:::\n:::\n\n\nDefault is *ok*, but for this data set, the hulls are a bit jagged. That can be adjusted with the `concavity` argument. I'll also throw in a fill color.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 +\n  geom_mark_hull(\n    concavity = 5,\n    aes(\n      fill = species\n    )\n  )\n```\n\n::: {.cell-output-display}\n![Smoothed out and filled convex hulls](index_files/figure-html/fig-penguin_hull2-1.png){#fig-penguin_hull2 fig-align='center' fig-alt='The same scatterplot, but now the convex hulls are smoother and are filled by species.' width=576}\n:::\n:::\n\n\nThat's better. It also comes with a mappable `label` and `description` aesthetics. Here, it seems a bit more touchy.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 +\n  geom_mark_hull(\n    concavity = 5,\n    aes(fill = species,\n        label = species,\n    ),\n    label.family = \"Fira Sans\"\n  )\n```\n\n::: {.cell-output-display}\n![*Attempted* labelling of convex hulls](index_files/figure-html/fig-penguin_hull3-1.png){#fig-penguin_hull3 fig-align='center' fig-alt='The scatter plot with the sme convex hull, but no labels actually present.' width=576}\n:::\n:::\n\n\nThe labels actually appear in the RStudio IDE for me, but not in the rendered page here because it wants more headroom around the plot. I'll add that in by setting the `expand` arguments to `ggplot::scale_y_continuous()` and `ggplot::scale_x_continuous()`, and I'll drop the legend while I'm at it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 +\n  geom_mark_hull(\n    concavity = 5,\n    aes(fill = species,\n        label = species,\n    ),\n    label.family = \"Fira Sans\"\n  )+\n  scale_y_continuous(\n    expand = expansion(\n      mult = c(0.25, 0.25)\n    )\n  )+\n  scale_x_continuous(\n    expand = expansion(\n      mult = c(0.25, 0.25)\n    )\n  ) +\n  guides(\n    color = \"none\",\n    fill = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![Labelled convex hulls](index_files/figure-html/fig-penguin-hull4-1.png){#fig-penguin-hull4 fig-align='center' fig-alt='The same scatter plot, now with more space around the x and y axes, with species labels drawn pointing to each convex hull' width=768}\n:::\n:::\n\n\n### Thoughts\n\nI like the convex hulls as a presentational aide. It probably shouldn't be taken as a *statistical* statement about, for example the degree of overlap between these three species, but is useful for outlining data points of interest.\n\nI kind of wish this was separated out into a few different, more conventional, ggplot2 layers. It's called a `geom_` but the convex hulls are definitely `stat_`s. The convex hull statistic layer isn't exposed to users, so you can't mix-and-match convex hull estimation and the geom used to draw it. On the other hand, I can see that it's much more souped up than a typical geom. For example, you can filter the data within the `aes()` mapping.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 +\n  geom_mark_hull(\n    concavity = 5,\n    aes(\n      filter = sex == \"female\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![Filtered convex hulls](index_files/figure-html/fig-penguin-hull-filter-1.png){#fig-penguin-hull-filter fig-align='center' fig-alt='The scatterplot, now with the convex hulls for each species only containung a portion of the data.' width=576}\n:::\n:::\n\n\n## `{ggdensity}`\n\nAs pointed out on the `{ggdensity}` readme, there's already a stat+geom in ggplot2 to visualize 2d density plots.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot2 <- \n  penguins |> \n  drop_na() |> \n  ggplot(aes(bill_length_mm, bill_depth_mm))\n\nplot2 +\n  stat_density_2d_filled()\n```\n\n::: {.cell-output-display}\n![Density contour plot](index_files/figure-html/fig-penguin_dens-1.png){#fig-penguin_dens fig-align='center' fig-alt='A density contour plot showing three peaks in the density distribution' width=576}\n:::\n:::\n\n\nThose levels are a *little* hard to follow, though, which is what `ggdensity::stat_hdr()` is for. It will plot polygons/contours for given probability levels, of the data distribution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot2 +\n  stat_hdr()\n```\n\n::: {.cell-output-display}\n![Highest density region contour plot](index_files/figure-html/fig-penguin_hdr-1.png){#fig-penguin_hdr fig-align='center' fig-alt='A density contour plot showing three peaks in the density distribution at 50%, 80%, 95% and 99%' width=576}\n:::\n:::\n\n\nThe probabilities are mapped to transparency by default, so you can map the fill color to a different dimension.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot2 +\n  stat_hdr(aes(fill = species))+\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![Highest density region contour plot, filled by species](index_files/figure-html/fig-penguin_hdr2-1.png){#fig-penguin_hdr2 fig-align='center' fig-alt='A density contour plot showing three peaks in the density distribution. There are three sets of contours for each penguin species' width=576}\n:::\n:::\n\n\nThe package also has a `ggdensity::stat_hdr_rug()` to add density distribution rugs to plots.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot2 +\n  geom_point()+\n  stat_hdr_rug(fill = \"grey90\")\n```\n\n::: {.cell-output-display}\n![HDR rug](index_files/figure-html/fig-penguin_hdr_rug-1.png){#fig-penguin_hdr_rug fig-align='center' fig-alt='A scatter plot with a data distribution rug indicating the density of the data distribution.' width=576}\n:::\n:::\n\n\n## `{geomtextpath}`\n\nI've actually been messing around with this for a bit, but `{geomtextpath}` allows you to place text along lines. There's standalone `geom_textpath()` and `geom_labelpath()` functions, but just to stick with the penguins data, I'm going to match the `textpath` geom with a different stat.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot3 <-\n  penguins |> \n  drop_na() |> \n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species))+\n    scale_color_brewer(palette = \"Dark2\")\n\nplot3 +\n  stat_smooth(\n    geom = \"textpath\", \n    # you have to map a label aesthetic\n    aes(label = species),\n  ) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![Trendlines with text written along them](index_files/figure-html/fig-penguin_textsmooth-1.png){#fig-penguin_textsmooth fig-align='center' fig-alt='A plot with one trend line for each species with the species name written along the line.' width=576}\n:::\n:::\n\n\nYou can move the location of the text on the path back and forth by either setting or mapping `hjust` to a number between 0 and 1, and you can lift the text off the line with `vjust`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot3 +\n  stat_smooth(\n    geom = \"textpath\", \n    # you have to map a label aesthetic\n    aes(label = species),\n    hjust = 0.1,\n    vjust = -1\n  ) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![Trendlines with text written along them](index_files/figure-html/fig-penguin_textsmooth2-1.png){#fig-penguin_textsmooth2 fig-align='center' fig-alt='A plot with one trend line for each species with the species name written just above line.' width=576}\n:::\n:::\n\n\nMixing and matching statistics and these direct labels could get pretty powerful. For example, here's the name of each species written around data ellipses.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot3 +\n  stat_ellipse(\n    geom = \"textpath\", \n    # you have to map a label aesthetic\n    aes(label = species),\n    hjust = 0.1  \n  ) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![Data ellipses text written along them](index_files/figure-html/fig-penguin_textsmooth3-1.png){#fig-penguin_textsmooth3 fig-align='center' fig-alt='A plot with one data ellipse drawn for each penguin species, with the species name written across it.' width=576}\n:::\n:::\n\n\n## Combo `{ggdensity}` and `{geomtextpath}`\n\nSince the `{ggdensity}` statistics are ordinary `stat_`, we can also combine them with textpaths to label the probability levels directly.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot2 +\n  stat_hdr_lines(\n    aes(label = after_stat(probs)),\n    color = \"grey90\",\n    geom = \"textpath\"\n  ) +\n  guides(alpha = \"none\")\n```\n\n::: {.cell-output-display}\n![Higest density region plot with direct labels](index_files/figure-html/fig-penguin_hdr-text-1.png){#fig-penguin_hdr-text fig-align='center' fig-alt='A highest density region plot with the probability levels written along the contours' width=576}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}