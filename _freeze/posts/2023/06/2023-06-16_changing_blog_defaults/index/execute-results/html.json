{
  "hash": "3f2576613e44a67102ae2165587ebc9a",
  "result": {
    "markdown": "---\ntitle: \"Changing Project Defaults\"\ndate: 2023-06-16\ntags: \n  - R\n  - \"`{here}`\"\n  - Quarto\n---\n\n\n## Upshot\n\nI've moved a bunch of R defaults that I want for each post from `.Rprofile` into `_defaults.R`, and now run `source(here::here(\"_defaults.R\"))` in each post where I want them. That looks like more work, but it actually makes things run a bit faster with the way Quarto runs R and freezes outputs.\n\n## Initial Defaults\n\nAround when I was setting up this blog project, I decided that I wanted some consistent theming for the figures so that they would fit in nicely into the rest of the blog, but I didn't want to have to include a megablock of code in every post that looked like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(khroma)\nlibrary(ggdark)\nlibrary(showtext)\nlibrary(colorspace)\n\n# get Fira Sans from google\nfont_add_google(name = \"Fira Sans\", family = \"Fira Sans\")\nshowtext_auto()\nbody_bg <- \"#222222\"\nplot_bg <- darken(\"#375a7f\", 0.50)\n\nmajor <- lighten(\n  plot_bg,\n  amount = 0.25\n)\n\nminor <- lighten(\n  plot_bg,\n  amount = 0.125\n)\n\nstrip_bg <- lighten(plot_bg, 0.5)\n\ntheme_set(dark_theme_gray(base_size = 12) + \n            theme(text = element_text(family = \"Fira Sans\"),\n                  plot.background = element_rect(fill = plot_bg),\n                  panel.background = element_blank(),\n                  panel.grid.major = element_line(color = major, linewidth = 0.2),\n                  panel.grid.minor = element_line(color = minor, linewidth = 0.2),\n                  legend.key = element_blank(),\n                  strip.background = element_rect(fill = strip_bg),\n                  strip.text = element_text(color = body_bg),\n                  axis.ticks = element_blank(),\n                  legend.background = element_blank()))\n\noptions(\n  ggplot2.discrete.colour = khroma::scale_color_bright,\n  ggplot2.discrete.fill = khroma::scale_fill_bright,\n  ggplot2.continuous.colour = khroma::scale_color_batlow,\n  ggplot2.continuous.fill = khroma::scale_fill_batlow\n)\n```\n:::\n\n\nAll that means I can just do some minimal `{ggplot2}` code in each post and it'll look something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(penguins, package = \"palmerpenguins\")\n\nggplot(\n  penguins, \n  aes(\n    x = bill_length_mm,\n    y = bill_depth_mm,\n    color = species\n  )\n)+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=576}\n:::\n:::\n\n\nSo, I stuck that big block of code into the `.Rprofile` for the blog project so that every time I opened the project, R would automatically source it. Nice, right?\n\n## The heaviness of `.Rprofile`\n\nI started realizing this wasn't optimal every time I re-rendered the blog for a new post. I have my quarto set to \"freeze\" each post after it's rendered, meaning it won't re-run all of the R code in a post unless I make a change to it, instead using the output of the previous time it ran. That's a time saver, cause even with many very simple posts with code, it just takes a while to run everything.\n\nThe issue was, even with `freeze: true`, Quarto would *still* source `.Rprofile` on every post. Which means that big block of code, including the call to `showtext::font_add_google()` would run for every post when I re-rendered the blog. And that was starting to get tedious!\n\n## Moving to `_defaults.R`\n\nSo, I moved all of the customization code from `.Rprofile` into `_defaults.R` file. I forget where I saw a `_defaults.R` first, but I think it was in some repository maintained by Hadley Wickham. The downside is that it's not as automatic as `.Rprofile`, in that I need to source it at the start of every post. That would be annoying if I was going to write the path out by hand, but it's a little easier with `here::here()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\n  here::here(\"_defaults.R\")\n)\n```\n:::\n\n\nThe major upside, though, is that sourcing code gets frozen along with all of the other code chunks in a post! So when I re-render the whole blog, Quarto won't re-run all of the code in `_defaults.R` unless the code has changed in a post. Overall, it feels worth it!.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}