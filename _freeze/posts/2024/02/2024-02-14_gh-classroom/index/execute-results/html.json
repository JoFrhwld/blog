{
  "hash": "6c9c0c027bbfe636a378f09a5d3a9bc6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Some lessons in using Github Classroom and Codespaces\"\ndate: 2024-02-14\norder: 1\nfilters:\n  - codeblocklabel\n---\n\n::: {.cell}\n\n:::\n\n\nI'm currently teaching [a computational linguistics course](https://lin511-2024.github.io/notes/), and for just the second time, I'm using [Github Classroom](https://classroom.github.com/) to manage assignments. I might make a few posts about what I've learned in the process, but for now, I think I'll focus on what's gone right, and what's been more challenging in using Github Codespaces.\n\n## Github Codespaces\n\nA Github Codespace is basically a virtual machine hosted by Github with VS Code as the default interface. First of all, since running a codespace involves data storage and running computation, they usually cost extra money, but you can get an educational discount to \\$0, [as described here](https://docs.github.com/en/education/manage-coursework-with-github-classroom/integrate-github-classroom-with-an-ide/using-github-codespaces-with-github-classroom).\n\n### Why Codespaces?\n\nThe number 1 reason to use some kind of cloud computing environment for teaching a computational course is to avoid the development environment paradox I've experienced:\n\n::: callout-note\n## The development environment paradox\n\nIf you are teaching a computational course with $N$ students using their own computers, the number of of development environments to debug is $>N$.\n:::\n\nWhen I previously taught an NLP course, we used replit, but I increasingly felt the goals of the platform were inappropriate for an educational context (e.g. they have \"bounties\" with dollar amounts attached to them), and they're [sunsetting their educational program anyway](https://blog.replit.com/update-on-teams-for-education).\n\nWith Codespaces, I'm still getting the benefits of having full control over the students' development environment, but the way they interact with it will be very similar to what it's like to interact with programming in a local environment.\n\n## How I've customized the Codespaces\n\nWhen you launch a codespace, the instructions for how it should be configured are located in `.devcontainer/devcontainer.json`. You can check out how I've customized [my assignment template repository here](https://github.com/Lin511-2024/assignment_template/). I've left most of the configuration options at their default values, but here's what I've customized.\n\n### The `postCreateCommand`\n\nAfter initially setting up the codespace, you can have it run shell commands, like installing any python dependencies. I wound up wanting it to do so many things that I've moved them into a separate `config.sh`, which gets run like this\n\n``` json\n{\n \"postCreateCommand\": \"sh .devcontainer/config.sh\"\n}\n```\n\n#### Installing python requirements\n\nFirst, I need the codespace install any python requirements for the assignment:\n\n``` sh\necho \"Installing Developer Requirements\"\npip3 install --user -r requirements/requirements.txt\n```\n\n#### Configure merge commits\n\nWe ran into a problem where, if I made some changes to which tests should run for the autograder, it resulted in a divergent history between the remote git repo and the student's local repo, which VS Code [does not present in the most user friendly way](https://lin511-2024.github.io/notes/concepts/04_git_errors.html).\n\nSo, in my post-creation config file, I've added merge commit configuration\n\n``` sh\necho \"Merge Commits Only\" \ngit config pull.rebase false\n```\n\n#### A `pre-commit` hook\n\nWe also ran into a problem where I didn't always remember to run `pip freeze` after writing an assignment. When students tried to run the code that I said would just work, it didn't. While learning \"module not found\" means you should just run `pip install` is a valuable lesson, I decided to add a `pre-commit` git hook to run `pip freeze` and add it to the commit. This also has the benefit that if students install a package and use it, tests should still all pass.\\\n\nI saved this hook to `.devcontainer/pre-commit`:\n\n``` sh\n#!/bin/sh\npip freeze > requirements/requirements.txt\ngit add requirements/requirements.txt\n```\n\nAnd added the following to `.devcontainer/config.sh`\n\n``` sh\necho \"pip freeze pre commit\"\nln .devcontainer/pre-commit .git/hooks/\nchmod +x .git/hooks/pre-commit\n```\n\n### Testing\n\nGithub Classroms lets you write unit tests that will \"autograde\" submissions. I wanted students to be able to run these tests locally, so they could tell where things weren't going right. So I added the following VC Code customizations to `devcontainer.json`.\n\n``` json\n{\n  \"customizations\": {\n\t\t\"vscode\": {\n\t\t\t\"settings\": {\"python.testing.pytestArgs\": [\n\t\t\t\t\"tests\"\n\t\t\t],\n\t\t\t\"python.testing.unittestEnabled\": false,\n\t\t\t\"python.testing.pytestEnabled\": true}\n\t\t}\n\t}\n}\n```\n\nThis sets up the testing pane in their VS Code automatically.\n\n## Shouldn't debugging be part of the learning process?\n\nMost of these customizations are me trying to foresee and forestall buggy problems students are going to run into. It's worth asking whether that's counterproductive. Maybe students *should* run into these problems and figure out how to fix them, since that's more realistic to what it's like to do computational work.\n\nTo that, I'd say *maybe*, depending on the level of the course. But if both programming and the course content are all new to many students in the class, I think they just need to experience things working first. When first starting out, you're faced with a real problem of how to attribute errors. If you click the git Sync button in VS Code and this error pops up:\n\n![](assets/git_error.png){fig-align=\"center\" width=\"90%\"}\n\nYou have no idea whether:\n\n-   You clicked the wrong button.\n-   You're not *supposed* to click any button.\n-   You actually need to click the button twice.\n-   The code you wrote was wrong.\n-   The internet is temporarily down.\n-   Your computer is broken.\n-   You need to install an additional program.\n-   You're too stupid to take this course.\n-   It actually worked and the error message was an error.\n-   ...\n\nWithout a baseline framework for understanding how things are working, you can't process and accommodate error messages like this, so, honestly, better for me, as the instructor, to try to make things just *work*, and present errors and bugs in a planned and structured way.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}