{
  "hash": "4cc45322e4b5f88d4299d91ab83a1e9f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with the Discrete Cosine Transform in R\"\nauthor: \"Josef Fruehwald\"\ndate: 2024-07-19\ncode-annotations: true\nfilters:\n  - codeblocklabel\n---\n\n\n\n\nI've been working a lot with the Discrete Cosine Transform in python, specifically as it's implemented in [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.dct.html#scipy.fft.dct). But, I really prefer doing my data munging and stats in R.[^1] What to do!\n\n[^1]: [polars](https://pola.rs/) *is* growing on me, but I don't think in it yet.\n\nI knew the answer rested in using the [reticulate](https://rstudio.github.io/reticulate/) package, which lets you communicate back and forth between python and R, but I hadn't appreciated *how* cool reticulate was, which is why I'm making this blog post.\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Irrelevant R setup\"}\nlibrary(tidyverse)\nlibrary(geomtextpath)\nlibrary(gt)\nsource(here::here(\"_defaults.R\"))\n```\n:::\n\n\n\n\nIn order to communicated back and forth, I'll need to load the reticulate package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n\n\n\nI'll also need to make sure that I've got scipy installed for python, which you can do with `reticulate::py_install()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_install(\"scipy\")\n```\n:::\n\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Python environments\n\nPython environments are kind of [notorious](https://xkcd.com/1987/) for being confusing to keep straight, which is why a whole host of tools for managing how python is installed have cropped up. Inside all of my R projects, I already use [`renv`](https://rstudio.github.io/renv/), which has an option to also manage your python environment for a project like so:\n\n``` r\nrenv::use_python()\n```\n\nIf we pull up the python configuration for reticulate, we can see it's installed in the local renv project.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_config()$python\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/joseffruehwald/Documents/blog/renv/python/virtualenvs/renv-python-3.11/bin/python\"\n```\n\n\n:::\n:::\n\n\n\n\nBut, if you have a favorite other way of managing your python environments, [there are ways to point reticulate at those too](https://rstudio.github.io/reticulate/reference/use_python.html).\n:::\n\n## Background: What is the DCT?\n\nThe Discrete Cosine Transform is very similar to the Fourier Transform (if that helps). It takes in a signal of wiggly data, and re-describes it in terms of weights on cosine functions of increasing frequency. @fig-dct-funcs plots the first DCT functions as they're defined by a particular set of options in `scipy.fft.dct`.\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![The first 5 cosine functions of the DCT.](index_files/figure-html/fig-dct-funcs-1.svg){#fig-dct-funcs width=768}\n:::\n:::\n\n\n\n\nIf you use the same number of cosine functions as you had data points in the original signal, you can fully reconstruct the original signal. Or, if you use just a few (like 5 in this figure), it has the effect of smoothing the signal when you invert the DCT.\n\n## Option 1: Passing Data back and forth\n\nSo, the [fasttrackpy](https://fasttrackiverse.github.io/fasttrackpy/) gives you the option of saving DCT parameters to a csv file. I'll load an example into R, and grab the rows for one example vowel so we can see what it looks like.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading in the data\ndct_params <- read_csv(                      \n  \"data/josef-fruehwald_speaker_param.csv\",  \n  col_types = cols()                         \n)                                            \n\n# getting the first token's id\nfirst_id <- dct_params$id[1]                 \n\n# subsetting to get just\n# the first token's parameters\nfirst_df <- dct_params |>                    \n  filter(                                    \n    id == first_id                           \n  )                                          \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Table Code\"}\nfirst_df |> \n  select(\n    label,\n    word,\n    param,\n    F1:F3\n  ) |> \n  gt() |> \n  fmt_number(\n    columns = F1:F3\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"nukcuchuvb\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#nukcuchuvb table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#nukcuchuvb thead, #nukcuchuvb tbody, #nukcuchuvb tfoot, #nukcuchuvb tr, #nukcuchuvb td, #nukcuchuvb th {\n  border-style: none;\n}\n\n#nukcuchuvb p {\n  margin: 0;\n  padding: 0;\n}\n\n#nukcuchuvb .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#nukcuchuvb .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#nukcuchuvb .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#nukcuchuvb .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#nukcuchuvb .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#nukcuchuvb .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#nukcuchuvb .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#nukcuchuvb .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#nukcuchuvb .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#nukcuchuvb .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#nukcuchuvb .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#nukcuchuvb .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#nukcuchuvb .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#nukcuchuvb .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#nukcuchuvb .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nukcuchuvb .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#nukcuchuvb .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#nukcuchuvb .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#nukcuchuvb .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nukcuchuvb .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#nukcuchuvb .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nukcuchuvb .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#nukcuchuvb .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nukcuchuvb .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#nukcuchuvb .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#nukcuchuvb .gt_left {\n  text-align: left;\n}\n\n#nukcuchuvb .gt_center {\n  text-align: center;\n}\n\n#nukcuchuvb .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#nukcuchuvb .gt_font_normal {\n  font-weight: normal;\n}\n\n#nukcuchuvb .gt_font_bold {\n  font-weight: bold;\n}\n\n#nukcuchuvb .gt_font_italic {\n  font-style: italic;\n}\n\n#nukcuchuvb .gt_super {\n  font-size: 65%;\n}\n\n#nukcuchuvb .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#nukcuchuvb .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#nukcuchuvb .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#nukcuchuvb .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#nukcuchuvb .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#nukcuchuvb .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#nukcuchuvb .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#nukcuchuvb .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#nukcuchuvb div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\">label</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"word\">word</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"param\">param</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"F1\">F1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"F2\">F2</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"F3\">F3</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">ay0</td>\n<td headers=\"word\" class=\"gt_row gt_left\">sunlight</td>\n<td headers=\"param\" class=\"gt_row gt_right\">0</td>\n<td headers=\"F1\" class=\"gt_row gt_right\">322.45</td>\n<td headers=\"F2\" class=\"gt_row gt_right\">1,178.19</td>\n<td headers=\"F3\" class=\"gt_row gt_right\">1,753.24</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">ay0</td>\n<td headers=\"word\" class=\"gt_row gt_left\">sunlight</td>\n<td headers=\"param\" class=\"gt_row gt_right\">1</td>\n<td headers=\"F1\" class=\"gt_row gt_right\">30.34</td>\n<td headers=\"F2\" class=\"gt_row gt_right\">−159.93</td>\n<td headers=\"F3\" class=\"gt_row gt_right\">55.47</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">ay0</td>\n<td headers=\"word\" class=\"gt_row gt_left\">sunlight</td>\n<td headers=\"param\" class=\"gt_row gt_right\">2</td>\n<td headers=\"F1\" class=\"gt_row gt_right\">−0.73</td>\n<td headers=\"F2\" class=\"gt_row gt_right\">−11.40</td>\n<td headers=\"F3\" class=\"gt_row gt_right\">23.71</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">ay0</td>\n<td headers=\"word\" class=\"gt_row gt_left\">sunlight</td>\n<td headers=\"param\" class=\"gt_row gt_right\">3</td>\n<td headers=\"F1\" class=\"gt_row gt_right\">2.25</td>\n<td headers=\"F2\" class=\"gt_row gt_right\">−15.00</td>\n<td headers=\"F3\" class=\"gt_row gt_right\">3.98</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">ay0</td>\n<td headers=\"word\" class=\"gt_row gt_left\">sunlight</td>\n<td headers=\"param\" class=\"gt_row gt_right\">4</td>\n<td headers=\"F1\" class=\"gt_row gt_right\">−5.07</td>\n<td headers=\"F2\" class=\"gt_row gt_right\">4.76</td>\n<td headers=\"F3\" class=\"gt_row gt_right\">4.59</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\nThese DCT parameters don't look like much on their own. That's even clearer if we plot them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\nfirst_df |> \n  pivot_longer(\n    F1:F3\n  ) |> \n  ggplot(\n    aes(param, value)\n  )+\n    geom_hline(\n      yintercept = 0\n    )+\n    geom_point(\n      aes(color = factor(param)),\n      size = 3\n    )+\n    guides(\n      color = \"none\"\n    )+\n    labs(\n      y = NULL\n    )+\n    facet_wrap(~name)+\n    theme(\n      aspect.ratio = 1\n    )\n```\n\n::: {.cell-output-display}\n![DCT parameters for one vowel token](index_files/figure-html/fig-first-params-1.svg){#fig-first-params width=576}\n:::\n:::\n\n\n\n\nTo get these values back into something interpretable, we need to apply the inverse discrete cosine transform. To do that, we can\n\n1.  pass these parameter values over to python,\n2.  apply `scipy.fft.idct` to them to get back formant-like values\n3.  pass the results back to R.\n\n### Passing data to python\n\nTo do this, first I'm going to assign each set of parameters to a variable in R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF1_param <- first_df$F1\nF2_param <- first_df$F2\nF3_param <- first_df$F3\n```\n:::\n\n\n\n\nHaving loaded reticulate before, any variable we've created in R are available in Python within an `r` object.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nr.F1_param\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[322.4520974990528, 30.339268532723658, -0.7277856792300109, 2.25340821466954, -5.069135079372835]\n```\n\n\n:::\n:::\n\n\n\n\nNow, we just need to import the `idct` function and apply it to each of these sets of parameters.\n\n### Applying idct\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom scipy.fft import idct\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nF1_expanded = idct(\n  r.F1_param,\n  n = 100,\n  orthogonalize = True,\n  norm = \"forward\"\n)\n\nF2_expanded = idct(\n  r.F2_param,\n  n = 100,\n  orthogonalize = True,\n  norm = \"forward\"\n)\n\nF3_expanded = idct(\n  r.F3_param,\n  n = 100,\n  orthogonalize = True,\n  norm = \"forward\"\n)\n```\n:::\n\n\n\n\n### Passing data back to R\n\nNow, we can get these expanded values back in R from an object called `py`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  py$F1_expanded\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 509.6159 509.6814 509.8102 509.9982 510.2390 510.5247\n```\n\n\n:::\n:::\n\n\n\n\nI'll pop these all into a tibble.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_expanded <- tibble(\n  F1 = py$F1_expanded,\n  F2 = py$F2_expanded,\n  F3 = py$F3_expanded\n) |> \n  mutate(\n    prop_time = (row_number() - 1)/(n()-1)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\nfirst_expanded |> \n  pivot_longer(\n    F1:F3,\n    names_to = \"formant\",\n    values_to = \"frequency\"\n  ) |> \n  ggplot(\n    aes(prop_time, frequency, color = formant)\n  )+\n    geom_textpath(\n      aes(label = formant),\n      linewidth = 1\n    )+\n    guides(\n      color = \"none\"\n    )+\n    labs(\n      x = \"proportional time\"\n    )+\n    expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![Inverse DCT formant results](index_files/figure-html/fig-formant-expanded-1.svg){#fig-formant-expanded width=768}\n:::\n:::\n\n\n\n\n### Shortcomings\n\n1.  That was a *lot* of code to get back the formant-like values for just one token!\n2.  It's not taking advantage of the really cool averaging properties of the DCT.\n3.  It didn't fit into my nice tidyverse workflows at all!\n\n## Option 2: Using Python functions *inside* R\n\nRather than passing data back and forth directly, instead, I'll import the scipy function directly into R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscipy <- reticulate::import(\"scipy\")\nidct <- scipy$fft$idct\n```\n:::\n\n\n\n\nNow, we can use `idct()` (almost) like an R function. Here's how it looks on one of the variables we created before.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_F1_expanded <- idct(\n  F1_param,\n  n = 100L,\n  orthogonalize = TRUE,\n  norm = \"forward\"\n)\n  \nhead(new_F1_expanded)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 509.6159 509.6814 509.8102 509.9982 510.2390 510.5247\n```\n\n\n:::\n:::\n\n\n\n\nI'll combine this with the handy-dandy tidyverse functions [across](https://dplyr.tidyverse.org/reference/across.html) and [reframe](https://dplyr.tidyverse.org/reference/reframe.html) to get average formant trajectories.\n\n### Step 1: Getting the average of the DCT parameters by token.\n\nWith`summarise()` and `across()`, we'll get the mean of the parameter values for F1, F2 and F3, grouped by label and parameter.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndct_params |> \n  summarise(\n    across(\n      F1:F3, mean\n    ),\n    .by = c(label, param)\n  )->\n  dct_averages\n\nhead(dct_averages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  label param      F1      F2      F3\n  <chr> <dbl>   <dbl>   <dbl>   <dbl>\n1 ay0       0 338.    1130.   1659.  \n2 ay0       1  33.8   -136.     26.9 \n3 ay0       2  -5.53    -5.95    5.37\n4 ay0       3  -0.580  -11.6    -1.87\n5 ay0       4  -1.20    -2.15   -3.60\n6 ey        0 274.    1380.   1736.  \n```\n\n\n:::\n:::\n\n\n\n\n### Step 2: Apply `idct` to the averages\n\nNow, I'll use `reframe()` and `across()` to get the formant-like values from these averages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndct_averages |> \n  reframe(\n    across(\n      F1:F3,\n      ~idct(\n        .x, \n        n = 100L,\n        orthogonalize = T, \n        norm = \"forward\"\n      )\n    ),\n    .by = label\n  ) |> \n  mutate(\n    prop_time = (row_number()-1)/(n()-1),\n    .by = label\n  )->\n  average_smooths\n\nhead(average_smooths)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  label        F1        F2        F3 prop_time\n  <chr> <dbl[1d]> <dbl[1d]> <dbl[1d]>     <dbl>\n1 ay0        532.     1287.     2400.    0     \n2 ay0        532.     1287.     2400.    0.0101\n3 ay0        532.     1288.     2400.    0.0202\n4 ay0        532.     1290.     2400.    0.0303\n5 ay0        532.     1292.     2401.    0.0404\n6 ay0        532.     1295.     2401.    0.0505\n```\n\n\n:::\n:::\n\n\n\n\n### Step 3: Make some good plots\n\nHere's a plot of the expanded formant trajectories for some of the more dynamic vowels.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\naverage_smooths |> \n  filter(\n    label %in% c(\n      \"iy\",\n      \"ey\",\n      \"ay\",\n      \"ay0\",\n      \"aw\",\n      \"Tuw\",\n      \"owL\"\n    )\n  ) |> \n  ggplot(\n    aes(F2, F1, color = label)\n  )+\n    geom_textpath(\n      aes(\n        group = label,\n        label = label\n      ),\n      arrow = arrow(\n        type = \"closed\",\n        length = unit(0.2, \"cm\")\n      ),\n      linewidth = 1\n    )+\n    scale_y_reverse()+\n    scale_x_reverse()+\n    guides(\n      color = \"none\"\n    )+\n    theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![Average formant trajectories](index_files/figure-html/fig-trajectories-1.svg){#fig-trajectories width=384}\n:::\n:::\n\n\n\n\n## A note\n\n*Usually* when you see a plot like @fig-trajectories, it's the result of some fairly complicated model fitting. But take a look through the source code here! Not a gam in sight! Just averaging, and the application of the idct!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}