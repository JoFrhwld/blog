{
  "hash": "a97cfed2014f9aad4a0fd2af9e6a94b2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Setting default ggplot2 colors\ndate: 2024-10-01\ncategories:\n  - ggplot2\n  - dataviz\nfig-width: 4\nfig-height: 3\nfig-align: center\ntwitter-card:\n  image: ./index_files/figure-html/share-image-1.png\n---\n\n\n\n\n\n\n\n\nThis might be a \"everyone else already knew about this\" thing, but I've finally gotten to a place of understanding about setting default colors scales for `{ggplot2}`, so I thought I'd share.\n\n::: callout-note\n## Setup\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(ggdensity)\nlibrary(showtext)\n\nfont_add_google(\"Public Sans\", \"Public Sans\")\nshowtext_auto()\n\nknitr::knit_hooks$set(crop = knitr::hook_pdfcrop)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\n\nsample_data <- tibble(\n  a = rnorm(1000, mean = 0, sd = 1),\n  b = rnorm(1000, mean = 2, sd = 1)\n) |> \n  mutate(\n    id = row_number(),\n    level = case_when(\n      b < 0 ~ \"low\",\n      b > 3 ~ \"high\",\n      .default = \"mid\"\n    ) |> \n      fct_relevel(\n        \"low\", \"mid\", \"high\"\n      )\n  )\n```\n:::\n\n\n\n\n\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Top line summary\n\nMy options for setting default color scales look like this:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# not run\noptions(\n  ggplot2.discrete.colour = lapply(\n    1:12, \n    ggthemes::ptol_pal()\n  ),\n  ggplot2.discrete.fill = lapply(\n    1:12, \n    ggthemes::ptol_pal()\n  ),\n  ggplot2.ordinal.colour = \\(...){\n    scale_color_viridis_d(\n      option = \"G\", \n      direction = -1, \n      ...\n    )\n  },\n  ggplot2.ordinal.fill = \\(...){\n    scale_fill_viridis_d(\n      option = \"G\", \n      direction = -1, \n      ...\n    )\n  },\n  ggplot2.continuous.colour = \\(...){\n    scico::scale_color_scico(\n      palette = \"batlow\", \n      ...\n    )\n  },\n  ggplot2.continuous.fill = \\(...){\n    scico::scale_fill_scico(\n      palette = \"batlow\", \n      ...\n    )\n  }\n)\n```\n:::\n\n\n\n\n\n\n\n:::\n\n# Theme setting\n\nI've known for a while now that you can change the default theme of plots with `theme_set()`, which can actually be more in-depth than just a default `theme_*()` function.\n\n\n\n\n\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(sample_data) +\n  geom_point(\n    aes(a,b)\n  ) ->\n  base_p\n\nbase_p + \n  labs(title = \"before\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=384}\n:::\n\n```{.r .cell-code}\n### setting the theme\ntheme_set(\n  theme_ggdist(base_size = 16) +\n    theme(\n      text = element_text(\n        family = \"Public Sans\"\n      )\n    )\n)\n\nbase_p +\n  labs(title = \"after\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=384}\n:::\n:::\n\n\n\n\n\n\n\n\n# Setting the default *colors*\n\nAccording to the changelogs, as of [ggplot2 v3.3.2](https://ggplot2.tidyverse.org/news/index.html?q=ggplot2.discrete.colour#ggplot2-332), the default color and fill scales can be set by passing values to `options()`. One way is to pass a list of values. I'll use `withr::with_options()` to demonstrate.\n\n## Discrete colors\n\n### Without doing anything\n\nHere's how things look by default:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  sample_data\n)+\n  geom_point(\n    aes(\n      a,\n      b,\n      color = level\n    )\n  ) ->\n  discrete3_p\n\nggplot(\n  sample_data\n)+\n  geom_point(\n    aes(\n      a,\n      b,\n      color = a < 0\n    )\n  ) ->\n  discrete2_p\n```\n:::\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\ndiscrete2_p\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=480}\n:::\n\n```{.r .cell-code}\ndiscrete3_p\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){fig-align='center' width=480}\n:::\n:::\n\n\n\n\n\n\n\n\n### Setting the default with a list\n\nIf we set the default colors by setting `options(ggplot2.discrete.colour = )` a list of color values, ggplot will use those colors if there's enough, and if there's not enough, it'll fall back to the default `scale_color_hue()`.\n\n\n\n\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nwithr::with_options(\n  list(\n    ggplot2.discrete.colour = list(\n      c(\"#AA4499\", \"#117733\")\n    )\n  ),\n  \n  {\n    print(discrete2_p)\n    print(discrete3_p)\n  }\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=480}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){fig-align='center' width=480}\n:::\n:::\n\n\n\n\n\n\n\n\nYou could even set a completely different vector of values for 3 colors.\n\n\n\n\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nwithr::with_options(\n  list(\n    ggplot2.discrete.colour = list(\n      c(\"#AA4499\", \"#117733\"),\n      c(\"#4477AA\", \"#88CCEE\", \"#DDCC77\")\n    )\n  ),\n  \n  {\n    print(discrete2_p)\n    print(discrete3_p)\n  }\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=480}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-2.png){fig-align='center' width=480}\n:::\n:::\n\n\n\n\n\n\n\n\nWhat I set up in my actual `_defaults.R` files is to generate all of the possible palettes from `ggthemes::ptol_pal()`, because I like it.\n\n\n\n\n\n\n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\nmy_discrete_list <- lapply(\n  1:12, \n  ggthemes::ptol_pal()\n)\n\nscales::show_col(\n  my_discrete_list[[10]],\n  ncol = 5,\n  cex_label = 0.8\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=480}\n:::\n:::\n\n\n\n\n\n\n\n\nI *could* set `ggplot2.discrete.colour` to `ggthemes::scale_color_ptol()`. But by setting it to the progessively larger list of colors, if if make the decision[^1] to map a factor with 13 labels to color, instead of erroring or just not plotting some points, it will fall back to the built in `scale_color_hue()`.\n\n[^1]: bad\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\n  ggplot2.discrete.colour = lapply(\n    1:12,\n    ggthemes::ptol_pal()\n  ),\n  ggplot2.discrete.fill = lapply(\n    1:12,\n    ggthemes::ptol_pal()\n  )\n)\n```\n:::\n\n\n\n\n\n\n\n\nHere's an example showing using that 13+ levels example\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Setting up base plots\"}\nggplot(sample_data)+\n  geom_point(\n    aes(\n      a,\n      b,\n      color = cut(a, 10)\n    )\n  )+\n  guides(\n    color = \"none\"\n  )->\n  base_10_p\n\nggplot(sample_data)+\n  geom_point(\n    aes(\n      a,\n      b,\n      color = cut(a, 15)\n    )\n  )+\n  guides(\n    color = \"none\"\n  )->\n  base_15_p\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\nbase_10_p +\n  labs(\n    title = \"10 cuts, list\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=384}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\nbase_15_p +\n  labs(\n    title = \"15 cuts, list\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=384}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\nbase_10_p +\n  ggthemes::scale_color_ptol()+\n  labs(\n    title = \"10 cuts, scale\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-3.png){width=384}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Plotting code\"}\nbase_15_p +\n  ggthemes::scale_color_ptol()+\n  labs(\n    title = \"15 cuts, scale\"\n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in colors[[n]]: subscript out of bounds\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-4.png){width=384}\n:::\n:::\n\n\n\n\n\n\n\n\n## Continuous colors\n\nThe continuous color scales need to be set more straightforwardly with a function that returns a `scale_color_*()`. I'm kind of bouncing around continuous color scales I like, but for now, I'm defaulting to the batlow palette from `{scico}`.\n\nSince getting the specific batlow palette requires passing arguments to `scico::scale_color_scico()`, I need to pass `ggplot2.continuous.colour` an anonymous function.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sample_data)+\n  geom_point(\n    aes(\n      a, b,\n      color = a\n    )\n  )->\n  continuous_base\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\n  ggplot2.continuous.colour = \\(...){\n    scico::scale_color_scico(\n      palette = \"batlow\", \n      ...\n    )\n  },\n  ggplot2.continuous.fill = \\(...){\n    scico::scale_fill_scico(\n      palette = \"batlow\", \n      ...\n    )\n  }\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous_base\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=480}\n:::\n:::\n\n\n\n\n\n\n\n\n## Ordinal colors\n\nFor the longest time, I only had settings for continuous and discrete color scales, and I kept getting frustrated when an occasional plot would show up with *neither* of my options showing up.\n\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(\n  ggplot(sample_data) +\n    geom_hdr_points(\n      aes(a, b),\n      probs = rev(ppoints(10))\n    )+\n    guides(color = \"none\") ->\n    density_points\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n\n\n\n\n\n\nI could *not*, for the life of me, figure out what option I had to set to change the default here! I eventually just searched [the ggplot2 github for `getOption`](https://github.com/search?q=repo%3Atidyverse%2Fggplot2+getOption&type=code) and found `ggplot2.ordinal.colour`! This is definitely not documented anywhere in the actual ggplot2 docs!\n\nAnyway, l kind of like the `mako` viridis palette for this, so that's what I'm using:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\n  ggplot2.ordinal.colour = \\(...){\n    scale_color_viridis_d(\n      option = \"G\", \n      direction = -1, \n      ...\n    )\n  },\n  ggplot2.ordinal.fill = \\(...){\n    scale_fill_viridis_d(\n      option = \"G\", \n      direction = -1, \n      ...\n    )\n  }\n)\n```\n:::\n\n::: {.cell .preview-image layout-align=\"center\"}\n\n```{.r .cell-code}\ndensity_points\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/share-image-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n\n\n\n\n\n\n# When I wind up doing this\n\nFor any one-off plot or notebook, I just set change the color scales \"manually\" in the normal way, by adding a `scale_color_*()` layer to the plot. But once I start working on a longer document or, say, a course website, I drop these options into a `_defaults.R` file at the top of my project directory, and source it on every page with\n\n``` r\nsource(here::here(\"_defaults.R\"))\n```\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}