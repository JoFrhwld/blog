---
title: "Rolling for Damage with the Central Limit Theorem"
date: 2024-09-08
draft: false
include-in-header: 
  text: |
    <style type="text/css">
      @font-face {
        font-family: "Dice";
        src: url("assets/font/dice.ttf") format("truetype");
      }
      .dice { font-family: "Dice", sans-serif }
    </style>
resources: 
  - assets/font/dice.ttf
format:
  html:
    code-tools: true
knitr: 
  opts_chunk: 
    out-width: 80%
fig-width: 5
fig-height: 3  
fig-align: center
---

I've been playing a *lot* of Baldur's Gate 3 lately. My party has gotten to max level, and we're running around, casting spells and taking names.

One of the spells my wizard has is called *Disintegrate*, which gets summarized like this

::: callout-important
## Disintegrate

Shoot a thin green ray from your finger. If the spell reduces the target to 0 hit points, it disintegrates into a crumbly ash.

### Damage

ðŸŽ² 10d6 + 40 (50\~100)
:::

The line of information under "Damage" means that to calculate how much damage you do when you cast the spell, you need to roll 10 6-sided dice ("d6"), then add 40. The "(50\~100)" part summarizes the worst vs best outcomes.

::: callout-tip
## Best and worst

Worst

:   You roll 10 d6, and they all come up 1: [1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice},[1]{.dice}. This sums to 10, then you add 40 to get a total of 50.

Best

:   You roll 10 d6, and they all come up 6: [6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice},[6]{.dice}. This sums up to 60, then you add 40 to get a total of 100.
:::

If you just glance at the description saying that the spell will do between 50 and 100 damage, you might think that you're equally likely to roll any amount of damage between these two values.

```{r}
#| echo: false
#| message: false
source(here::here("_defaults.R"))
library(tidyverse)
```

```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
tibble(
  roll = 50:100
) |> 
  mutate(prob = 1/n()) |> 
  ggplot(
    aes(
      roll,
      prob
    )
  )+
  geom_col(
    aes(fill = prob)
  )+
  scale_fill_distiller(
    palette = "Blues"
  )+
  guides(
    fill  = "none"
  )
  
```

But, as you play, you'll find that hitting something right in the middle, like 75, is very likely, and that hitting either 50 or 100 is vanishingly rare. The distribution of rolls wind up looking like this:

```{r}
#| echo: false
library(droll)
d6 <- d(6)
```

```{r}
#| echo: false
#| classes: preview-image
tibble(
  roll = 50:100,
  prob = droll(
    roll,
    (10 * d6) + 40
  )
) |> 
  ggplot(
    aes(
      roll,
      prob
    )
  ) + 
  geom_col(
    aes(fill = prob)
  )+
  scale_fill_distiller(
    palette = "Blues",
    direction = 1
  )+
  guides(
    fill  = "none",
  )+
  labs(
    title = "10d6 + 40"
  )
```

```{r}
#| echo: false

low <- qroll(0.025, (10*d6)+40)
high <- qroll(0.975, (10*d6)+40)
```

In fact, 95% of the rolls are going to be between `r low` and `r high`. The rest of this post is about these two questions:

1.  Why is that?
2.  Is that a normal distribution?

# Why is that?

## 1d6

We should start things off easy, and look at what happens when we roll 1d6. As long as the die is fair, any value between 1 and 6 is possible. And for each value between 1 and 6, there's only 1 possible way to get that value.

```{r}
#| echo: false
library(gt)
```

```{r}
#| echo: false
tibble(
  total = 1:6,
  rolls = 1:6,
  n = 1:1
) |> 
  gt()  |> 
  data_color(
    columns = n,
    direction = "column",
    target_columns = everything(),
    method = "numeric",
    palette = "Blues"
  ) |> 
  tab_style(
    style = list(
      "font-family: Dice",
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = rolls
    )
  )
```

## 2d6

Things are more complicated when we start rolling 2d6 and summing them together. Let's name each of our die "Alpha" and "Beta" to keep them straight.

There's only one way for us to get a total roll of 2: both Alpha and Beta need to come up [1]{.dice}. Same thing for a total roll of 12: both Alpha and Beta need to come up [6]{.dice}.

But to roll a value of 3, there are two ways.

-   Alpha rolls [1]{.dice}, and Beta rolls [2]{.dice}.

-   Alpha rolls [2]{.dice}, and Beta rolls [1]{.dice}.

If we expand this out to look at all possible values between 2 and 12, we'll find that there's six unique ways to roll 7, with each value above and below having fewer unique ways.

```{r}
#| echo: false
expand_grid(
  first = 1:6,
  second = 1:6
) |> 
  mutate(
    total = second + first,
    roll_combo = str_glue("{first} {second}")
  ) |> 
  summarise(
    rolls = str_flatten(roll_combo, collapse = "; "),
     n = n(),
    .by = total
  ) |> 
  gt()  |> 
  data_color(
    columns = n,
    direction = "column",
    target_columns = everything(),
    method = "numeric",
    palette = "Blues"
  ) |> 
  tab_style(
    style = list(
      "font-family: Dice",
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = rolls
    )
  )
```

There's just more different ways for a very large roll on Alpha to get balanced out by a smaller roll on Beta.

## 10d6

```{r}
#| echo: false
n <- (1/droll(10, 10*d6)) * droll(35, 10*d6)
```

If we expand this out to the 10d6 situation, where there's only one way to roll 10 (all six die roll [1]{.dice}), there are `r format(n, big.mark = ",")` different ways to roll 35. The massively larger number of ways to get 35 results in it showing up that much more often than 10 (or 60).

# Is that a Normal Distribution?

Yes, or, at least it's approximating one. This is, in fact, a demonstration of the "Central Limit Theorem". The Central Limit Theorem states that if we take a bunch of samples from a single distribution and average them together, and we keep doing that, the distribution of the averages will approach a normal distribution.

An average is the sum of a list of numbers, divided by now many numbers there are. When we roll for damage in D&D, we just do the summing part, but the result is still going to approximate the Normal Distribution.

## Unfair dice

The nifty thing about the Central Limit Theorem is that it works no matter what the shape of the original distribution was. Let's say we had a 10 sided die, but 3 of the sides have "1" painted, 3 of the sides have "6" painted on them, and the rest have 2 through 5. With this die, we're a lot more likely to roll a 1 or a 6.

```{r}
#| echo: false
dX <- d(c(1,1,1:6,6,6))

tibble(
  roll = 1:6,
  prob = droll(
    roll,
    (1* dX) 
  )
) |> 
  ggplot(
    aes(
      roll,
      prob
    )
  ) + 
  geom_col(
    aes(fill = prob),
    color = "grey20"
  )+
  scale_fill_distiller(
    palette = "Blues",
    direction = 1
  )+
  guides(
    fill  = "none",
  )+
  labs(
    title = "dX: unfair die"
  )
```

If we used this unfair die, to roll damage for the Disintegrate spell, how will that affect the outcome?

```{r}
#| echo: false
tibble(
  roll = 50:100,
  prob = droll(
    roll,
    (10 * dX) + 40
  )
) |> 
  ggplot(
    aes(
      roll,
      prob
    )
  ) + 
  geom_col(
    aes(fill = prob)
  )+
  scale_fill_distiller(
    palette = "Blues",
    direction = 1
  )+
  guides(
    fill  = "none",
  )+
  labs(
    title = "10dX + 40"
  )
```

It might be hard to *see* the difference, but this unfair die is slightly more spread out than the fair d6

```{r}
#| echo: false
tibble(
  roll = 50:100,
  die = "dX",
  prob = droll(
    roll,
    (10 * dX) + 40
  )
) -> unfair

tibble(
  roll = 50:100,
  die = "d6",
  prob = droll(
    roll,
    (10 * d6) + 40
  )
)->fair
```

```{r}
#| echo: false
bind_rows(
  unfair, fair
) |> 
  ggplot(
    aes(roll, prob)
  )+
    geom_area(
      aes(fill = die),
      position = "identity",
      alpha = 0.6,
      color = "grey20"
    )+
  theme(
    legend.position = "top"
  )
```

*But*, even though it's more spread out, it's still approximating a normal distribution!
