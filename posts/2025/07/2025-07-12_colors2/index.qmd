---
title: "Light vs Dark Color"
format: html
editor: visual
code-fold: true
draft: true
knitr: 
  opts_chunk: 
    message: false
    warning: false
---

```{r}
#| code-fold: false
source(here::here("_defaults.R"))
library(tidyverse)
library(tidytuesdayR)
library(tinytable)
library(mgcv)
library(marginaleffects)
library(ggdist)
library(ggdensity)
library(geomtextpath)
library(ggrepel)
library(plotly)

library(patchwork)
set.seed(2025-07-08)
```

```{r}
max_text_contrast <- function(bgs){
  w_contrast <- abs(
    contrast_ratio(
      "white", bgs,
      algorithm = "APCA"
    )[,1]
  )
  b_contrast <- abs(
    contrast_ratio(
      "black", bgs,
      algorithm = "APCA"
    )[,1]
  )
  out_cols <- c("white", "black")

  out_cols[
    cbind(w_contrast, b_contrast) |>
      apply(1, which.max)
  ]
  
}
```

```{r}
#| code-fold: false
#| eval: false
# eval: false
# downloading & saving to avoid 
# downloading on every quarto render
tuesdata <- tidytuesdayR::tt_load('2025-07-08')

fs::dir_create("data")
write_rds(tuesdata, "data/tuesdata.rds")
```

```{r}
#| code-fold: false
tuesdata <- read_rds("data/tuesdata.rds")

answers <- tuesdata$answers
color_ranks <- tuesdata$color_ranks
users <- tuesdata$users
```

```{r}
color_ranks |> 
  pull(hex) |>
  hex2RGB() |> 
  as("HLS") |> 
  slot("coords") |> 
  as_tibble() |> 
  bind_cols(
    color_ranks
  ) ->
  color_hls
```

## Modifiers

```{r}
color_hls |> 
  filter(
    str_detect(color, "[ /-]", negate = T),
    color != "dark"
  ) |> 
  pull(color) |> 
  str_c(collapse = "|") ->
  single_word_opts

str_c(
  "(\\w+)?", single_word_opts, "(\\w+)?"
) ->
  single_word_regex
```

```{r}
color_hls |> 
  mutate(
    color_words = str_extract_all(
      color,
      single_word_regex
    ),
    n_color = map_int(
      color_words,
      length
    )
  ) ->
  color_hls

color_hls |> 
  count(
    n_color
  ) |> 
  tt() |> 
  style_tt(
    j = 2, align = "r"
  )
```

```{r}
color_hls |> 
  filter(n_color == 0) ->
  zeros

zeros |> 
  select(
    color, rank, hex
  ) |> 
  tt(caption = "0 single color words") |> 
  style_tt(
    i = 1:nrow(zeros),
    j = 3,
    background = zeros$hex,
    color = max_text_contrast(zeros$hex)
  )
```

```{r}
color_hls |> 
  filter(
    n_color == 3
  ) |> 
  select(
    color, rank, hex
  ) |> 
  arrange(rank) ->
  threes

threes |> 
  tt() |> 
  style_tt(
    i = 1:nrow(threes),
    j = "hex",
    background = threes$hex,
    color = max_text_contrast(threes$hex)
  )
```

```{r}
color_hls |> 
  filter(
    n_color == 1
  ) |> 
  mutate(
    modifiers = str_remove_all(
      color,
      single_word_regex
    ) |> 
      str_squish()
  ) |> 
  filter(
    str_length(modifiers) > 0
  ) |> 
  select(modifiers) |> 
  separate_longer_delim(
    modifiers,
    delim = " "
  ) |> 
  count(modifiers) |> 
  arrange(desc(n)) |> 
  slice(1:5) |> 
  tt() |> 
  style_tt(
    j = "n",
    align = "r"
  )
```

## General modifier analysis

```{r}
make_mod_comp <- function(color_hls, mod = "light"){
  color_hls |> 
    filter(
      n_color == 1,
      str_detect(color, " ", negate = T)
    ) |> 
    mutate(
      base = color
    ) |> 
    select(
      base, H:S, hex
    ) ->
    base_cols
  
  color_hls |> 
    filter(
      n_color == 1,
      str_detect(color, str_c("^", mod, " "))
    ) |> 
    mutate(
      base = str_remove(color, mod) |> str_squish()
    ) |> 
    select(
      base, H:S, hex
    ) ->
    mod_cols
  
  mod_cols |> 
    left_join(
      base_cols,
      by = "base",
      suffix = c("_mod", "_base")
    ) |>  
    mutate(
      H_diff = H_mod - H_base,
      L_diff = L_mod - L_base,
      S_diff = S_mod - S_base,
      H_diff = case_when(
        H_diff > 180 ~ H_diff - 360,
        H_diff < -180 ~ H_diff + 360,
        .default = H_diff
      ),
      modfier = mod
    ) |> 
    filter(
      if_all(
        ends_with("_diff"),
        is.finite
      )
    ) 
}
```

```{r}
make_mod_dotplot <- function(mod_comp){
  mod_comp |> 
    pivot_longer(
      ends_with("_diff")
    ) |> 
    mutate(
      name = case_match(
        name,
        "H_diff" ~ "Hue",
        "L_diff" ~ "Lightness",
        "S_diff" ~ "Saturation"
      )
    ) |> 
    ggplot(
      aes(value)
    ) +
    geom_vline(
      xintercept = 0,
      color = "grey60"
    ) +
    geom_dots(
      aes(
        fill = hex_base,
        order = L_base
      ),
      group = 1
    ) +
    scale_fill_identity() +
    labs(x = '"light" shift')+
    facet_wrap(~name, scales = "free_x") +
    theme_no_y() 
}
```

```{r}
make_mod_shiftplot <- function(mod_comp){
  mod_comp |> 
    pivot_longer(
      matches("[A-Z]_", ignore.case = F)
    ) |>
    rename(
      base_col = base
    ) |> 
    separate_wider_delim(
      name,
      delim = "_",
      names = c("var", "comp")
    ) |> 
    pivot_wider(
      names_from = comp,
      values_from = value
    ) |> 
    ggplot(
      aes(
        base, diff
      )
    ) +
    geom_hline(yintercept = 0) +
    geom_point(
      aes(fill = hex_base),
      shape = 21,
      size = 3
    ) +
    stat_smooth(
      method = gam,
      formula = y ~ s(x, bs = "cs"),
      se = F
    ) +
    scale_fill_identity()+
    facet_wrap(~var, scales = "free")
}
```

```{r}
make_mod_lsvector <- function(mod_comp){
  mod <- mod_comp$modifier[1]
  mod_comp |> 
    ggplot(
      aes(
        L_base, S_base
      )
    )+
    geom_segment(
      aes(
        xend = L_mod,
        yend = S_mod,
        color = hex_mod
      ),
      arrow = arrow(
        type = "closed",
        length = unit(0.2, "cm")
      )
    ) +
    geom_point(
      aes(
        fill = hex_base
      ),
      shape = 21, 
      size = 3
    ) +
    scale_color_identity(aesthetics = c("colour", "fill")) +
    scale_x_continuous(
      "Lightness",
      limits = c(0,1)
    ) +
    scale_y_continuous(
      "Saturation",
      limit = c(0, 1)
    )+
    coord_fixed() +
    labs(title = str_glue("{mod} <color>"))
}
```

```{r}
color_hls |> 
  mutate(
    L_scaling = cos((L*2)-1),
    x = sin(H*(pi/180)) * S * L_scaling,
    y = cos(H*(pi/180)) * S * L_scaling,
    z = (L*2)-1
  ) ->
  color_sphere

color_sphere |> 
  ggplot(
    aes(x, y, color = hex)
  )+
  geom_point() +
  scale_color_identity()


plot_ly() |>
  add_trace(
    type = 'scatter3d',
    mode = "markers",
    x = color_sphere$x,
    y = color_sphere$y,
    z = color_sphere$z,
    marker = list(
      color = color_sphere$hex,
      size = 3
    )
  )
```

```{r}
plot(cos(seq(-1, 1, length = 100)))
```

```{r}
color_hls |> 
  make_mod_comp("light") |> 
  mutate(
    across(
      starts_with("H_"),
        ~.x * (pi/180)
      ),
      x_base = sin(H_base) * sqrt(
        abs((L_base^2)-(S_base^2))
      ),
      y_base = cos(H_base) * sqrt(
        abs((L_base^2)-(S_base^2))
      ),
      x_mod = sin(H_base) * sqrt(
        abs((L_mod^2)-(S_mod^2))
      ),
      y_mod = cos(H_base) * sqrt(
        abs((L_mod^2)-(S_mod^2))
      ),
    hemi_base = case_when(
      L_base <= 0.5 ~ "dark",
      .default = "light"
    ),
    hemi_mod = case_when(
      L_mod <= 0.5 ~ "dark",
      .default = "light"
    )
  ) ->
  sphere_vec

sphere_vec |> 
  pivot_longer(
      c(x_base, y_base,L_base,
        x_mod, y_mod,L_mod
      )
    ) |> 
  separate_wider_delim(
    name, 
    delim = "_",
    names = c("dim", "shade")
  ) |> 
  pivot_wider(
    names_from = dim,
    values_from = value
  ) |> 
  nest(
    .by = c(base, hex_mod),
    data =c(hex_mod, x:L)
  ) ->
  segments 

plot_ly() |> 
  add_trace(
    type = 'scatter3d', 
    mode = "markers",
    x = sphere_vec$x_base,
    y = sphere_vec$y_base,
    z = sphere_vec$L_base*2,
    marker = list(
      color = sphere_vec$hex_base
    )
  )  ->
  p


for(i in seq_along(segments$data)){
  d <- segments$data[[i]]
  p |> 
    add_trace(
      type = 'scatter3d',
      mode = "lines",
      x = d$x,
      y = d$y,
      z = d$L*2,
      line = list(color = d$hex_mod, width = 3)
    )->
    p
}

p |> layout(showlegend = F)
```

## "Light"

First, let's get all of the "lightening" descriptors

```{r}
color_hls |> 
  filter(
    n_color == 1,
    str_detect(color, " ", negate = T)
  ) |> 
  mutate(
    base = color
  ) |> 
  select(
    base, H:S, hex
  ) ->
  base_cols
```

```{r}
color_hls |> 
  filter(
    n_color == 1,
    str_detect(color, "^light ")
  ) |> 
  mutate(
    base = str_remove(color, "light") |> str_squish()
  ) |> 
  select(
    base, H:S, hex
  ) ->
  light_cols

light_cols |> 
  left_join(
    base_cols,
    by = "base",
    suffix = c("_light", "_base")
  ) |>  
  mutate(
    H_diff = H_light - H_base,
    L_diff = L_light - L_base,
    S_diff = S_light - S_base,
    H_diff = case_when(
      H_diff > 180 ~ H_diff - 360,
      H_diff < -180 ~ H_diff + 360,
      .default = H_diff
    )
  ) |> 
  filter(
    if_all(
      ends_with("_diff"),
      is.finite
    )
  ) ->
  light_comp
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
light_comp |> 
  pivot_longer(
    ends_with("_diff")
  ) |> 
  mutate(
    name = case_match(
      name,
      "H_diff" ~ "Hue",
      "L_diff" ~ "Lightness",
      "S_diff" ~ "Saturation"
    )
  ) |> 
  ggplot(
    aes(value)
  ) +
  geom_vline(
    xintercept = 0,
    color = "grey60"
  ) +
  geom_dots(
    aes(
      fill = hex_base,
      order = L_base
    ),
    group = 1
  ) +
  scale_fill_identity() +
  labs(x = '"light" shift')+
  facet_wrap(~name, scales = "free_x") +
  theme_no_y() ->
  lightening_plot

lightening_plot
lightening_plot + theme_dark()
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
light_comp |> 
  pivot_longer(
    matches("[A-Z]_", ignore.case = F)
  ) |>
  rename(
    base_col = base
  ) |> 
  separate_wider_delim(
    name,
    delim = "_",
    names = c("var", "comp")
  ) |> 
  pivot_wider(
    names_from = comp,
    values_from = value
  ) |> 
  ggplot(
    aes(
      base, diff
    )
  ) +
  geom_hline(yintercept = 0) +
  geom_point(
    aes(fill = hex_base),
    shape = 21,
    size = 3
  ) +
  stat_smooth(
    method = gam,
    formula = y ~ s(x, bs = "cs"),
    se = F
  )+
  scale_fill_identity()+
  facet_wrap(~var, scales = "free") ->
  shift_plot

shift_plot
(shift_plot + theme_dark()) |> dark_render()
```

```{r}
#| crop: true
#| fig-width: 5
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark

light_comp |> 
  ggplot(
    aes(
      L_base, S_base
    )
  )+
  geom_segment(
    aes(
      xend = L_light,
      yend = S_light,
      color = hex_light
    ),
    arrow = arrow(
      type = "closed",
      length = unit(0.2, "cm")
    )
  ) +
  geom_point(
    aes(
      fill = hex_base
    ),
    shape = 21, 
    size = 3
  ) +
  scale_color_identity(aesthetics = c("colour", "fill")) +
  scale_x_continuous(
    "Lightness",
    limits = c(0,1)
  ) +
  scale_y_continuous(
    "Saturation",
    limit = c(0, 1)
  )+
  coord_fixed() +
  labs(title = "Light <color>")->
  ls_shift

ls_shift
(ls_shift + theme_dark()) |> dark_render()
```

## "Dark"

```{r}
color_hls |> 
  filter(
    n_color == 1,
    str_detect(color, "^dark ")
  ) |> 
  mutate(
    base = str_remove(color, "dark") |> str_squish()
  ) |> 
  select(
    base, H:S, hex
  ) ->
  dark_cols

dark_cols |> 
  left_join(
    base_cols,
    by = "base",
    suffix = c("_dark", "_base")
  ) |>  
  mutate(
    H_diff = H_dark - H_base,
    L_diff = L_dark - L_base,
    S_diff = S_dark - S_base,
    H_diff = case_when(
      H_diff > 180 ~ H_diff - 360,
      H_diff < -180 ~ H_diff + 360,
      .default = H_diff
    )
  ) |> 
  filter(
    if_all(
      ends_with("_diff"),
      is.finite
    )
  ) ->
  dark_comp
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
dark_comp |> 
  pivot_longer(
    ends_with("_diff")
  ) |> 
  mutate(
    name = case_match(
      name,
      "H_diff" ~ "Hue",
      "L_diff" ~ "Lightness",
      "S_diff" ~ "Saturation"
    )
  ) |> 
  ggplot(
    aes(value)
  ) +
  geom_vline(
    xintercept = 0,
    color = "grey60"
  ) +
  geom_dots(
    aes(
      fill = hex_base,
      order = L_base
    ),
    group = 1
  ) +
  scale_fill_identity() +
  labs(x = '"dark" shift')+
  facet_wrap(~name, scales = "free_x") +
  theme_no_y() ->
  darkening_plot

darkening_plot
darkening_plot + theme_dark()
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
dark_comp |> 
  filter(
    H_diff < 50
  ) |> 
  pivot_longer(
    matches("[A-Z]_", ignore.case = F)
  ) |>
  rename(
    base_col = base
  ) |> 
  separate_wider_delim(
    name,
    delim = "_",
    names = c("var", "comp")
  ) |> 
  pivot_wider(
    names_from = comp,
    values_from = value
  ) |> 
  ggplot(
    aes(
      base, diff
    )
  ) +
  geom_hline(yintercept = 0) +
  geom_point(
    aes(fill = hex_base),
    shape = 21,
    size = 3
  ) +
  stat_smooth(
    method = gam,
    formula = y ~ s(x, bs = "cs"),
    se = F
  )+
  scale_fill_identity()+
  facet_wrap(~var, scales = "free") ->
  dark_shift_plot

dark_shift_plot
(dark_shift_plot + theme_dark()) |> dark_render()
```

```{r}
#| crop: true
#| fig-width: 5
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark

dark_comp |> 
  ggplot(
    aes(
      L_base, S_base
    )
  )+
  geom_segment(
    aes(
      xend = L_dark,
      yend = S_dark,
      color = hex_dark
    ),
    arrow = arrow(
      type = "closed",
      length = unit(0.2, "cm")
    )
  ) +
  geom_point(
    aes(
      fill = hex_base
    ),
    shape = 21, 
    size = 3
  ) +
  scale_color_identity(aesthetics = c("colour", "fill")) +
  scale_x_continuous(
    "Lightness",
    limits = c(0,1)
  ) +
  scale_y_continuous(
    "Saturation",
    limit = c(0, 1)
  )+
  coord_fixed() +
  labs(title = "dark <color>")->
  dark_ls_shift

dark_ls_shift
(dark_ls_shift + theme_dark()) |> dark_render()
```

## "Bright"

```{r}
color_hls |> 
  filter(
    n_color == 1,
    str_detect(color, "^bright ")
  ) |> 
  mutate(
    base = str_remove(color, "bright") |> str_squish()
  ) |> 
  select(
    base, H:S, hex
  ) ->
  bright_cols

bright_cols |> 
  left_join(
    base_cols,
    by = "base",
    suffix = c("_bright", "_base")
  ) |>  
  mutate(
    H_diff = H_bright - H_base,
    L_diff = L_bright - L_base,
    S_diff = S_bright - S_base,
    H_diff = case_when(
      H_diff > 180 ~ H_diff - 360,
      H_diff < -180 ~ H_diff + 360,
      .default = H_diff
    )
  ) |> 
  filter(
    if_all(
      ends_with("_diff"),
      is.finite
    )
  ) ->
  bright_comp
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
bright_comp |> 
  pivot_longer(
    ends_with("_diff")
  ) |> 
  mutate(
    name = case_match(
      name,
      "H_diff" ~ "Hue",
      "L_diff" ~ "Lightness",
      "S_diff" ~ "Saturation"
    )
  ) |> 
  ggplot(
    aes(value)
  ) +
  geom_vline(
    xintercept = 0,
    color = "grey60"
  ) +
  geom_dots(
    aes(
      fill = hex_base,
      order = L_base
    ),
    group = 1
  ) +
  scale_fill_identity() +
  labs(x = '"bright" shift')+
  facet_wrap(~name, scales = "free_x") +
  theme_no_y() ->
  brightening_plot

brightening_plot
brightening_plot + theme_dark()
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
bright_comp |> 
  filter(
    H_diff < 50
  ) |> 
  pivot_longer(
    matches("[A-Z]_", ignore.case = F)
  ) |>
  rename(
    base_col = base
  ) |> 
  separate_wider_delim(
    name,
    delim = "_",
    names = c("var", "comp")
  ) |> 
  pivot_wider(
    names_from = comp,
    values_from = value
  ) |> 
  ggplot(
    aes(
      base, diff
    )
  ) +
  geom_hline(yintercept = 0) +
  geom_point(
    aes(fill = hex_base),
    shape = 21,
    size = 3
  ) +
  stat_smooth(
    method = gam,
    formula = y ~ s(x, bs = "cs"),
    se = F
  )+
  scale_fill_identity()+
  facet_wrap(~var, scales = "free") ->
  bright_shift_plot

bright_shift_plot
(bright_shift_plot + theme_dark()) |> dark_render()
```

```{r}
#| crop: true
#| fig-width: 5
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark

bright_comp |> 
  ggplot(
    aes(
      L_base, S_base
    )
  )+
  geom_segment(
    aes(
      xend = L_bright,
      yend = S_bright,
      color = hex_bright
    ),
    arrow = arrow(
      type = "closed",
      length = unit(0.2, "cm")
    )
  ) +
  geom_point(
    aes(
      fill = hex_base
    ),
    shape = 21, 
    size = 3
  ) +
  scale_color_identity(aesthetics = c("colour", "fill")) +
  scale_x_continuous(
    "Lightness",
    limits = c(0,1)
  ) +
  scale_y_continuous(
    "Saturation",
    limit = c(0.5, 1)
  )+
  coord_fixed() +
  labs(title = "bright <color>")->
  bright_ls_shift

bright_ls_shift
(bright_ls_shift + theme_dark()) |> dark_render()
```

## "Deep"

```{r}
color_hls |> 
  filter(
    n_color == 1,
    str_detect(color, "^deep ")
  ) |> 
  mutate(
    base = str_remove(color, "deep ") |> str_squish()
  ) |> 
  select(
    base, H:S, hex
  ) ->
  deep_cols

deep_cols |> 
  left_join(
    base_cols,
    by = "base",
    suffix = c("_deep", "_base")
  ) |>  
  mutate(
    H_diff = H_deep - H_base,
    L_diff = L_deep - L_base,
    S_diff = S_deep - S_base,
    H_diff = case_when(
      H_diff > 180 ~ H_diff - 360,
      H_diff < -180 ~ H_diff + 360,
      .default = H_diff
    )
  ) |> 
  filter(
    if_all(
      ends_with("_diff"),
      is.finite
    )
  ) ->
  deep_comp
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
deep_comp |> 
  pivot_longer(
    ends_with("_diff")
  ) |> 
  mutate(
    name = case_match(
      name,
      "H_diff" ~ "Hue",
      "L_diff" ~ "Lightness",
      "S_diff" ~ "Saturation"
    )
  ) |> 
  ggplot(
    aes(value)
  ) +
  geom_vline(
    xintercept = 0,
    color = "grey60"
  ) +
  geom_dots(
    aes(
      fill = hex_base,
      order = L_base
    ),
    group = 1
  ) +
  scale_fill_identity() +
  labs(x = '"deep" shift')+
  facet_wrap(~name, scales = "free_x") +
  theme_no_y() ->
  deepening_plot

deepening_plot
deepening_plot + theme_dark()
```

```{r}
#| fig-width: 12
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark
deep_comp |> 
  filter(
    H_diff < 50
  ) |> 
  pivot_longer(
    matches("[A-Z]_", ignore.case = F)
  ) |>
  rename(
    base_col = base
  ) |> 
  separate_wider_delim(
    name,
    delim = "_",
    names = c("var", "comp")
  ) |> 
  pivot_wider(
    names_from = comp,
    values_from = value
  ) |> 
  ggplot(
    aes(
      base, diff
    )
  ) +
  geom_hline(yintercept = 0) +
  geom_point(
    aes(fill = hex_base),
    shape = 21,
    size = 3
  ) +
  stat_smooth(
    method = gam,
    formula = y ~ s(x, bs = "cs"),
    se = F
  )+
  scale_fill_identity()+
  facet_wrap(~var, scales = "free") ->
  deep_shift_plot

deep_shift_plot
(deep_shift_plot + theme_dark()) |> dark_render()
```

```{r}
#| crop: true
#| fig-width: 5
#| fig-height: 5
#| renderings: 
#|   - light
#|   - dark

deep_comp |> 
  ggplot(
    aes(
      L_base, S_base
    )
  )+
  geom_segment(
    aes(
      xend = L_deep,
      yend = S_deep,
      color = hex_deep
    ),
    arrow = arrow(
      type = "closed",
      length = unit(0.2, "cm")
    )
  ) +
  geom_point(
    aes(
      fill = hex_base
    ),
    shape = 21, 
    size = 3
  ) +
  scale_color_identity(aesthetics = c("colour", "fill")) +
  scale_x_continuous(
    "Lightness",
    limits = c(0,1)
  ) +
  scale_y_continuous(
    "Saturation",
    limits = c(0,1)
  )+
  coord_fixed() +
  labs(title = "deep <color>")->
  deep_ls_shift

deep_ls_shift
(deep_ls_shift + theme_dark()) |> dark_render()
```

```{r}
#| eval: false
expand_grid(
  x = seq(-1,1, length = 300),
  y = seq(-1,1, length = 300)
) |> 
  
  mutate(
    L = sqrt((x^2) + (y^2))
  ) |> 
  filter(
    L <= 0.9
  ) |> 
  mutate(
    H_rad = atan2(x,y),
    H_rad = case_when(
      H_rad < 0 ~ H_rad + (2*pi),
      .default = H_rad
    ),
    H = H_rad * (180/pi)
  ) |> 
  rowwise() |> 
  mutate(
    hls = HLS(H, L, 0.75) |>  list(),
    hex = hex(hls)
  ) ->
  color_wheel
```

```{r}
#| eval: false
color_wheel |> 
  ggplot(
    aes(x, y)
  )+
  geom_raster(
    aes(fill = hex)
  )+
  scale_fill_identity()+
  coord_fixed()
```

```{r}
#| eval: false
gb_mod |> 
  predictions(
    newdata = color_wheel,
    re_formula = NA
  ) |> 
  as_tibble()->
  color_wheel_pred

attr(color_wheel_pred, "model") <- NULL
attr(color_wheel_pred, "newdata_modeldata") <- NULL
attr(color_wheel_pred, "posterior_draws") <- NULL
```

```{r}
#| eval: false
color_wheel_pred |> 
  filter(y < 0) ->
  bottom_pred

```

```{r}
#| eval: false
#| fig-width: 5
#| fig-height: 5
color_wheel |> 
  ggplot(
    aes(x, y)
  ) +
  geom_raster(aes(fill = hex)) +
  geom_textcontour(
    data = bottom_pred,
    aes(z = estimate),
    breaks = c(0.1, 0.5, 0.9)
  ) +
  scale_fill_identity() +
  coord_fixed()+
  theme_no_x() + 
  theme_no_y()
```

```{r}
#| eval: false
color_ranks |> 
  slice(1:2) |> 
  select(-hex) ->
  rank_inspect

rank_inspect |> 
  left_join(answers, by = "rank") |> 
  select(-c(rank, user_id)) |> 
  mutate(
    .by = color,
    response_id = row_number()
  ) |> 
  pivot_wider(
    names_from = color,
    values_from = hex
  ) |> 
  head() ->
  hex_inspect


hex_inspect |> 
  tt() |> 
  style_tt(
    i = 1:6,
    j = 2,
    background = hex_inspect$purple
  ) |> 
  style_tt(
    i = 1:6,
    j = 3,
    background = hex_inspect$green
  )
```

```{r}
#| eval: false
color_ranks |> 
  pull(
    hex
  ) |> 
  hex2RGB() |> 
  as("HLS") ->
  hls_data


hls_data@coords |> 
  as_tibble()->
  hls_cols

color_ranks |> 
  bind_cols(hls_cols)->
  hls_ranks
```

```{r}
#| eval: false
hls_ranks |> 
  mutate(
    H_rad = H * (pi/180)
  ) ->
  hls_ranks
```

```{r}
#| eval: false
hls_ranks |> 
  filter(
    str_detect(color, "red|green|blue")
  ) |> 
  mutate(
    base_col = str_extract(color, "red|green|blue")
  ) |> 
  ggplot(
    aes(sin(H_rad)*L, cos(H_rad)*L)
  ) +
  geom_point(
    aes(color = hex, size = S)
  ) +
  stat_hdr(
    aes(color = base_col),
    probs = 0.95
  )+
  scale_color_identity()+
  coord_fixed()+
  guides(alpha = "none")
```

```{r}
#| eval: false
hls_ranks |> 
  filter(
    str_detect(color, "^light ")
  ) |> 
  mutate(
    pieces = str_split(color, " "),
    n_pieces = map_dbl(pieces, length),
    base_col = map_chr(pieces, ~.x[2]),
    mod = "light"
  ) |> 
  filter(n_pieces == 2) ->
  light_cols

hls_ranks |> 
  filter(
    str_detect(color, "^dark ")
  ) |> 
  mutate(
    pieces = str_split(color, " "),
    n_pieces = map_dbl(pieces, length),
    base_col = map_chr(pieces, ~.x[2]),
    mod = "dark"
  ) |> 
  filter(n_pieces == 2) ->
  dark_cols
```

```{r}
#| eval: false
hls_ranks |> 
  filter(color %in% light_cols$base_col) |> 
  mutate(
    base_col = color,
    mod = "base"
  )->
  base_cols
```

```{r}
#| eval: false
base_cols |> 
  bind_rows(
    light_cols
  ) |> 
  select(
    base_col, mod, hex:H_rad
  ) |> 
  pivot_wider(
    names_from = mod, 
    values_from = hex:H_rad
  ) ->
  lighten_wide

base_cols |> 
  bind_rows(
    dark_cols
  ) |> 
  select(
    base_col, mod, hex:H_rad
  ) |> 
  pivot_wider(
    names_from = mod, 
    values_from = hex:H_rad
  ) ->
  darken_wide

lighten_wide |> 
  ggplot(
    aes(
      sin(H_rad_base) * L_base,
      cos(H_rad_base) * L_base,
      color = hex_light
    )
  )+
  geom_segment(
    aes(
      xend = sin(H_rad_light) * L_light,
      yend = cos(H_rad_light) * L_light
    ),
    arrow = arrow(
      type = "closed",
      length = unit(0.25, "cm")
    )
  ) +
  geom_point(
    aes(color = hex_base)
  ) +
  scale_color_identity() +
  coord_fixed()
```

```{r}
#| eval: false
darken_wide |> 
  filter(
    is.finite(H_rad_base)
  ) |> 
  ggplot(
    aes(
      sin(H_rad_dark) * L_dark,
      cos(H_rad_dark) * L_dark,
      color = hex_base    
    )
  )+
  geom_segment(
    aes(
      xend = sin(H_rad_base) * (L_base),
      yend = cos(H_rad_base) * (L_base)
    ),
    arrow = arrow(
      type = "closed",
      length = unit(0.25, "cm")
    )
  ) +
  geom_point(
    aes(color = hex_dark)
  ) +
  scale_color_identity() +
  coord_fixed()
```

```{r}
#| eval: false
lighten_wide |> 
  mutate(
    hue_shift = H_rad_light - H_rad_base,
    hue_shift = case_when(
      hue_shift > pi ~ hue_shift - (2*pi),
      .default = hue_shift
    )
  )  |> 
  filter(is.finite(H_rad_base)) |> 
  mutate(
    tb = case_when(
      cos(H_rad_base) > 0 ~ "t",
      .default = "b"
    ),
    lr = case_when(
      sin(H_rad_base) > 0 ~ "r",
      .default = "l"
    ),
    quadrant = str_glue("{tb}{lr}")
  ) |> 
  summarise(
    .by = quadrant,
    hue_shift = median(hue_shift)
  ) |> 
  arrange(hue_shift)
```

```{r}
n <- 400
lo <- runif(n)*2*pi-pi ## longitude
la <- runif(3*n)*pi-pi/2
ind <- runif(3*n)<=cos(la)
la <- la[ind];
la <- la[1:n]

summary(la)
```
