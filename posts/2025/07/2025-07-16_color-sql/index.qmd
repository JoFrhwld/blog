---
title: "Getting the xkcd color survey sqlite database"
date: 2025-07-16
format: html
editor: visual
draft: false
---

I had a lot of fun working with the XKCD [color](https://jofrhwld.github.io/blog/posts/2025/07/2025-07-09_color-survey/) [survey](https://jofrhwld.github.io/blog/posts/2025/07/2025-07-12_color-sphere/) [data](https://jofrhwld.github.io/blog/posts/2025/07/2025-07-14_light-color/), and I think I'll keep messing around with it here and there in the future.
But I also think I'll want access to the full data.
The tidytuesday data set was necessarily boiled down.
The `answers` data frame contained just one hex code associated with one color label, not every color label given to every hex code in the survey.
The full data set is available as a sqlite dump linked to from [the xkcd blog](https://blog.xkcd.com/2010/05/03/color-survey-results/), so this post is just about how I set up access to it within my blog RStudio project.

```{r}
# basic setup
source(here::here("_defaults.R"))
library(tidyverse)
library(colorspace)
```

## Necessary Libraries

For this workflow, I used

-   `{fs}`: for working with file systems

-   `{DBI}` and `{RSQLite}`: for working with the sqlite database

-   `{dbplyr}`: for using dplyr commands on the database.

```{r}
library(fs)
library(DBI)
library(RSQLite)
library(dbplyr)
```

## Downloading the database

If you want to hang onto the tar file locally (in case of linkrot), you could download it to a real location, but I just want to send it to a temp file.
You can get the temp directory for your R session with `fs::path_temp()`, and I created the destination file using `fs::path()`.

``` r
download.file(
  "http://xkcd.com/color/colorsurvey.tar.gz",
  fs::path(
    fs::path_temp(),
    "colorsurvey.tar.gz"
  )
)
```

Then, it's a matter of untaring it.

``` r
untar(
  fs::path(fs::path_temp(), "colorsurvey.tar.gz"),
  exdir = fs::path(fs::path_temp(), "colorsurvey")
)
```

You can get a list of the available files like so:

``` r
path(
  path_temp(),
  "colorsurvey"
) |>
  dir_ls() ->
  dump_files
```

I'm not actually including this code in executable chunks to avoid downloading the tar file on every re-render, but `dump_files` will look something like

```         
[1] /var/folders/xyz/mainsurvey_sqldump.txt
[2] /var/folders/xyz/satfaces_sqldump.txt
```

It's the `mainsurvey_sqldump.txt` file that we want to process.

``` r
dump_files |>
  keep(
    ~str_detect(.x, "mainsurvey")
  ) ->
  survey_dump
```

## Creating the local database

To set up the database, we need to read the sqldump file.
Apparently there's a sqlite command `.read` that will do this, but I couldn't figure out how to run it within a `{DBI}` or `{RSQLite}` function, so I have to use a `system()` command.

First, I have decide where this database is going, and since I don't want it to wind up being duplicated in every post directory, I'll create a top level project directory called `data`.

``` r
fs::dir_create(
  here::here("data")
)
```

Then, I need to decide on the name of the database file.

``` r
local_sql_path <- here::here("data", "colors.sqlite")
```

I'll glue my variables into the system command I want:

``` r
creation_command <- str_glue(
  "sqlite3 {local_sql_path} < {survey_dump}"
)
```

And then finally run it.

``` r
system(creation)
```

### Updating `.gitignore`

You'll probably want to add `*.sqlite` file to your gitignore, which you can either do do by hand or with `usethis::use_git_ignore()`

``` r
usethis::use_git_ignore("*.sqlite")
```

## Looking at the database

Now we can connect to the database and look at it.

```{r}
colordb <- dbConnect(
  RSQLite::SQLite(), 
  here::here("data", "colors.sqlite")
)
```

```{r}
dbListTables(colordb)
```

We can access tables from the database like it's a dataframe with `tbl()`.
It doesn't actually read the whole thing into memory.

```{r}
colors <- tbl(colordb, "answers")
colors
```

Now, we can run the `{dplyr}`-like commands on this table thanks to `{dbplyr}` and only load the rows we're interested in.

```{r}
colors |> 
  # get just blue and light blue
  filter(
    colorname %in% c("blue", "light blue")
  ) |> 
  # manually get some hex values
  mutate(
    rh = sql("printf('%02X', r)"),
    gh = sql("printf('%02X', g)"),
    bh = sql("printf('%02X', b)")
  ) |> 
  mutate(
    hex = sql("rh||gh||bh")
  )
```

I'm kind of glad I messed around with manually converting the rgb values to hex values, cause it turns out I don't know what the right way is to convert these rgb values to hex codes.
My manual approach gives me [#4B31EA]{style="background: #4B31EA; color: white;"} for the first row, but using the `{colorspace}` package, I get two different hex codes depending on whether I assume `r`, `g`, `b` are RGB or sRGB values.

```{r}
RGB(
  75/255,
  49/255,
  234/255
) |> 
  hex() 
```

```{r}
sRGB(
  75/255,
  49/255,
  234/255
) |> 
  hex()
```

```{r}
swatchplot(
  "RGB" = "#9479F6",
  "sRGB" = "#4B31EA"
)
```

ü§∑‚Äç‚ôÇÔ∏è

```{r}
dbDisconnect(colordb)
```
